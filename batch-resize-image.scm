(define (morph-filename orig-name new-extension)
 (let* ((buffer (vector "" "" "")))
  (if (re-match "^(.*)[.]([^.]+)$" orig-name buffer)
   (string-append (substring orig-name 0 (car (vector-ref buffer 2))) new-extension)
  )
 )
)

(define
  (batch-resize-image
    pattern
  )
  (let* ((filelist (cadr (file-glob pattern 1))))
    (while (not (null? filelist))
      (let* ((filename (car filelist))
             (image (car (gimp-file-load RUN-NONINTERACTIVE filename filename)))
             (drawable (car (gimp-image-get-active-layer image)))
             (width (car (gimp-image-width image)))
             (height (car (gimp-image-height image)))
            )
        (cond ((<= height width)
                (let ((nwidth 800))
                  (let ((nheight (quotient (* height nwidth) width)))
                    (gimp-image-scale image nwidth nheight)
                  )
                )
              )
              (else
                (let ((nheight 800))
                  (let ((nwidth (quotient (* width nheight) height)))
                    (gimp-image-scale image nwidth nheight)
                  )
                )
              )
        )
        (let ((nfilename (morph-filename filename "resize.jpg")))
          (gimp-file-save RUN-NONINTERACTIVE image drawable nfilename nfilename)
        )
        (gimp-image-delete image)
      )
      (set! filelist (cdr filelist))
    )
  )
)
